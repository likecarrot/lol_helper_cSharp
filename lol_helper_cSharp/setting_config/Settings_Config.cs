using Newtonsoft.Json;
using QuickType;
using System;
using System.IO;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var configSettings = ConfigSettings.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ConfigSettings
    {
        [JsonProperty("matching_helper")]
        public bool MatchingHelper { get; set; }

        [JsonProperty("accept_status")]
        public AcceptStatus AcceptStatus { get; set; }

        [JsonProperty("aram_helper")]
        public AramHelper AramHelper { get; set; }

        [JsonProperty("classic_helper")]
        public ClassicHelper ClassicHelper { get; set; }
    }

    public partial class AcceptStatus
    {
        [JsonProperty("auto_accept_switch")]
        public bool AutoAcceptSwitch { get; set; }

        [JsonProperty("accept_timeout_switch")]
        public bool AcceptTimeoutSwitch { get; set; }

        [JsonProperty("accept_timeout")]
        public long AcceptTimeout { get; set; }
    }

    public partial class AramHelper
    {
        [JsonProperty("aram_helper_switch")]
        public bool AramHelperSwitch { get; set; }

        [JsonProperty("aram_config")]
        public AramConfig AramConfig { get; set; }
    }

    public partial class AramConfig
    {
        [JsonProperty("Use_Reroller")]
        public long UseReroller { get; set; }

        [JsonProperty("love_champs")]
        public List<LoveChamp> LoveChamps { get; set; }

        [JsonProperty("wait_max_sec")]
        public long WaitMaxSec { get; set; }
    }

    public partial class LoveChamp
    {
        [JsonProperty("champ_id")]
        public long ChampId { get; set; }

        [JsonProperty("champ_name")]
        public string ChampName { get; set; }

        [JsonProperty("love_score")]
        public long LoveScore { get; set; }
    }

    public partial class ClassicHelper
    {
        [JsonProperty("classic_helper_switch")]
        public bool ClassicHelperSwitch { get; set; }

        [JsonProperty("classic_config")]
        public ClassicConfig ClassicConfig { get; set; }
    }

    public partial class ClassicConfig
    {
        [JsonProperty("auto_lock")]
        public bool AutoLock { get; set; }

        [JsonProperty("champ_id")]
        public long ChampId { get; set; }

        [JsonProperty("lock_timeout")]
        public long LockTimeout { get; set; }
    }

    public partial class ConfigSettings
    {
        public static ConfigSettings FromJson(string json) => JsonConvert.DeserializeObject<ConfigSettings>(json, QuickType.Converter.Settings);
    }
}



class Settings_Config
{
    private static Settings_Config instance;
    private string config_json;
    public ConfigSettings settings;
    private Settings_Config()
    {
        config_json = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
        config_json += "/lol_helper/config4.json";
        if (!File.Exists(config_json))
        {
            settings = new ConfigSettings();
            settings.AramHelper = new AramHelper();
            settings.AramHelper.AramConfig = new AramConfig();

            settings.ClassicHelper = new ClassicHelper();
            settings.AcceptStatus = new AcceptStatus();
            settings.ClassicHelper.ClassicConfig = new ClassicConfig();


            settings.MatchingHelper = true;
            settings.AcceptStatus.AutoAcceptSwitch = true;
            settings.AcceptStatus.AcceptTimeoutSwitch = false;
            settings.AcceptStatus.AcceptTimeout = 0;

            settings.AramHelper.AramHelperSwitch = false;
            settings.AramHelper.AramConfig.UseReroller = 1;
            settings.AramHelper.AramConfig.WaitMaxSec = 0;


            settings.ClassicHelper.ClassicHelperSwitch = false;
            settings.ClassicHelper.ClassicConfig.AutoLock = false;
            settings.ClassicHelper.ClassicConfig.LockTimeout = 0;
            settings.ClassicHelper.ClassicConfig.ChampId = 0;


            string json = JsonConvert.SerializeObject(settings);
            File.WriteAllText(config_json, json);
        }
        else
        {
            string content = File.ReadAllText(config_json);
            settings = ConfigSettings.FromJson(content);
        }
        // Private constructor to prevent instantiation outside the class
    }

    public static Settings_Config GetInstance()
    {
        if (instance == null)
        {
            instance = new Settings_Config();
        }
        return instance;
    }

    public void load_config(string path = "")
    {
        if (!string.IsNullOrEmpty(path))
        {
            string content = File.ReadAllText(path);
            settings = ConfigSettings.FromJson(content);
        }
        else
        {
            string content = File.ReadAllText(config_json);
            settings = ConfigSettings.FromJson(content);
        }
    }
    public void save_config(string path = "")
    {

        if (!string.IsNullOrEmpty(path))
        {
            string json = JsonConvert.SerializeObject(settings);
            File.WriteAllText(path, json);
        }
        else
        {
            string json = JsonConvert.SerializeObject(settings);
            File.WriteAllText(config_json, json);
        }
    }

}
