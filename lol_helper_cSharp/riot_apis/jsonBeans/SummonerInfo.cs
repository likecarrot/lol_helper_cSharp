// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var topLevel = SummonerInfo.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class SummonerInfo
    {
        [JsonProperty("accountId")]
        public long AccountId { get; set; }

        [JsonProperty("displayName")]
        public string DisplayName { get; set; }

        [JsonProperty("gameName")]
        public string GameName { get; set; }

        [JsonProperty("internalName")]
        public string InternalName { get; set; }

        [JsonProperty("nameChangeFlag")]
        public bool NameChangeFlag { get; set; }

        [JsonProperty("percentCompleteForNextLevel")]
        public long PercentCompleteForNextLevel { get; set; }

        [JsonProperty("privacy")]
        public string Privacy { get; set; }

        [JsonProperty("profileIconId")]
        public long ProfileIconId { get; set; }

        [JsonProperty("puuid")]
        public Guid Puuid { get; set; }

        [JsonProperty("rerollPoints")]
        public RerollPoints RerollPoints { get; set; }

        [JsonProperty("summonerId")]
        public long SummonerId { get; set; }

        [JsonProperty("summonerLevel")]
        public long SummonerLevel { get; set; }

        [JsonProperty("tagLine")]
        public string TagLine { get; set; }

        [JsonProperty("unnamed")]
        public bool Unnamed { get; set; }

        [JsonProperty("xpSinceLastLevel")]
        public long XpSinceLastLevel { get; set; }

        [JsonProperty("xpUntilNextLevel")]
        public long XpUntilNextLevel { get; set; }
    }

    public partial class RerollPoints
    {
        [JsonProperty("currentPoints")]
        public long CurrentPoints { get; set; }

        [JsonProperty("maxRolls")]
        public long MaxRolls { get; set; }

        [JsonProperty("numberOfRolls")]
        public long NumberOfRolls { get; set; }

        [JsonProperty("pointsCostToRoll")]
        public long PointsCostToRoll { get; set; }

        [JsonProperty("pointsToReroll")]
        public long PointsToReroll { get; set; }
    }

    public partial class SummonerInfo
    {
        public static SummonerInfo FromJson(string json) => JsonConvert.DeserializeObject<SummonerInfo>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this SummonerInfo self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
